var EXPORTED_SYMBOLS = ['results', 'popupNotify'];

var results = {
    goodSSL : [],
    permWhitelistLength : 0,
    whitelist : [],
    tempNoAlerts : []
};

var redirectedTab =  [[]]; //Tab info for pre-redirect URLs.


//Generic notifier method
function popupNotify(title,body){
    try{
        var alertsService = Components.classes["@mozilla.org/alerts-service;1"]
        .getService(Components.interfaces.nsIAlertsService);
        alertsService.showAlertNotification("chrome://httpsfinder/skin/httpRedirect.png",
            title, body, false, "", null);
    }
    catch(e){ /*Do nothing*/ }
};

//Passed in uri variable is an asciispec uri from pre-redirect. (i.e. full http://www.domain.com)
function writeRule(uri){
    var eTLDService = Components.classes["@mozilla.org/network/effective-tld-service;1"]
    .getService(Components.interfaces.nsIEffectiveTLDService);
    try{
        var topLevel = "." + eTLDService.getPublicSuffix(uri);
        var hostname = uri.host.toLowerCase();
    }
    catch(e){
        hostname = gBrowser.currentURI.host.toLowerCase();
        topLevel =  "." + eTLDService.getPublicSuffixFromHost(hostname);
    }
    var title = "";


    /////WHAT DO HERE?
    for(var i=0; i<httpsfinder.browserOverlay.redirectedTab.length; i++){
        if(typeof httpsfinder.browserOverlay.redirectedTab[i] == "undefined" ||
            typeof httpsfinder.browserOverlay.redirectedTab[i][1] == "undefined"){
        // return;do nothing
        }
        else if(httpsfinder.browserOverlay.redirectedTab[i][1].host.toLowerCase() ==
            gBrowser.currentURI.host.toLowerCase())
            hostname = gBrowser.currentURI.host.toLowerCase();
        topLevel =  "." + eTLDService.getPublicSuffixFromHost(hostname);
    }

    var tldLength = topLevel.length - 1;

    if(hostname.indexOf("www.") != -1)
        title = hostname.slice(hostname.indexOf(".",0) + 1,hostname.lastIndexOf(".",0) - tldLength);
    else
        title = hostname.slice(0, hostname.lastIndexOf(".", 0) - tldLength);
    title = title.charAt(0).toUpperCase() + title.slice(1);

    var rule;
    if(hostname == "localhost"){
        title = "Localhost";
        rule = "<ruleset name=\""+ title + "\">" + "\n" +
        "<target host=\"" + hostname + "\" />" +
        "<rule from=\"^http://(www\\.)?" + title.toLowerCase() +
        "\\" +"/\"" +" to=\"https://" + title.toLowerCase() +
        "/\"/>" + "\n" + "</ruleset>";
    }

    else{
        rule = "<ruleset name=\""+ title + "\">" + "\n"
        + "\t" + "<target host=\"" + hostname + "\" />" + "\n";

        //Check hostname for "www.".
        //One will be "domain.com" and the other will be "www.domain.com"
        var targetHost2 = "";
        if(hostname.indexOf("www.") != -1){
            targetHost2 = httpsfinder.browserOverlay.getHostWithoutSub(hostname);
            rule = rule + "\t" + "<target host=\"" + targetHost2 +"\" />" + "\n" +
            "\t" + "<rule from=\"^http://(www\\.)?" + title.toLowerCase() +
            "\\" + topLevel +"/\"" +" to=\"https://www." + title.toLowerCase() +
            topLevel + "/\"/>" + "\n" + "</ruleset>";
        }
        else{
            domains = hostname.split(".");
            if(domains.length == 2){
                targetHost2 = "www." + hostname;
                rule = rule + "\t" + "<target host=\"" + targetHost2 +"\" />" +
                "\n" + "\t" + "<rule from=\"^http://(www\\.)?" + title.toLowerCase() +
                "\\" + topLevel +"/\"" +" to=\"https://" + title.toLowerCase() +
                topLevel + "/\"/>" + "\n" + "</ruleset>";
            }
            //If hostname includes non-www subdomain, we don't include www in our rule.
            else
                rule = rule + "\t" + "<rule from=\"^http://(www\\.)?" +
                title.toLowerCase() + "\\" + topLevel +"/\"" +" to=\"https://"
                + title.toLowerCase() + topLevel + "/\"/>" + "\n" + "</ruleset>";
        }
    }

    rule = rule + "\n" + "<!-- Rule generated by HTTPS Finder " +
    httpsfinder.strings.getString("httpsfinder.version") +
    " -->"

    if(httpsfinder.prefs.getBoolPref("showrulepreview")){
        var params = {
            inn:{
                rule:rule
            },
            out:null
        };
        window.openDialog("chrome://httpsfinder/content/rulePreview.xul", "",
            "chrome, dialog, modal,centerscreen, resizable=yes", params).focus();
        if (!params.out){
            httpsfinder.browserOverlay.removeNotification('httpsfinder-getHE');
            return; //user canceled rule
        }
        else
            rule = params.out.rule; //reassign rule value from the textbox
    }

    //Synchronous for FF3.5
    var foStream = Components.classes["@mozilla.org/network/file-output-stream;1"].
    createInstance(Components.interfaces.nsIFileOutputStream);

    var file = Components.classes["@mozilla.org/file/directory_service;1"].
    getService(Components.interfaces.nsIProperties).
    get("ProfD", Components.interfaces.nsIFile);
    file.append("HTTPSEverywhereUserRules")
    file.append(title + ".xml");
    try{
        file.create(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, 0666);
    }
    catch(e){
        if(e.name == 'NS_ERROR_FILE_ALREADY_EXISTS')
            file.remove(false);
    }
    foStream.init(file, 0x02 | 0x08 | 0x20, 0666, 0);
    var converter = Components.classes["@mozilla.org/intl/converter-output-stream;1"].
    createInstance(Components.interfaces.nsIConverterOutputStream);
    converter.init(foStream, "UTF-8", 0, 0);
    converter.writeString(rule);
    converter.close();

    if(httpsfinder.results.tempNoAlerts.indexOf(hostname) == -1)
        httpsfinder.results.tempNoAlerts.push(hostname);

    httpsfinder.browserOverlay.alertRuleFinished(gBrowser.contentDocument);
};

//return host without subdomain (e.g. input: code.google.com, outpout: google.com)
function getHostWithoutSub(fullHost){
    if(typeof fullHost != 'string')
        return "";
    else
        return fullHost.slice(fullHost.indexOf(".") + 1, fullHost.length);
};


function restartNow(){
    Application.restart();
};

function alertRuleFinished(aDocument){
    //Check firefox version and use appropriate method
    if(Application.version.charAt(0) >= 4){
        Components.utils.import("resource://gre/modules/AddonManager.jsm");
        AddonManager.getAddonByID("https-everywhere@eff.org", function(addon) {
            //Addon is null if not installed
            if(addon == null)
                getHTTPSEverywhere();
            else if(addon != null)
                promptForRestart();
        });
    }
    else{  //Firefox versions below 4.0
        if(!Application.extensions.has("https-everywhere@eff.org"))
            getHTTPSEverywhere();
        else
            promptForRestart();
    }

    //Alert user to install HTTPS Everywhere for rule enforcement
    var getHTTPSEverywhere = function() {
        var installButtons = [{
            label: httpsfinder.strings.getString("httpsfinder.main.getHttpsEverywhere"),
            accessKey: httpsfinder.strings.getString("httpsfinder.main.getHttpsEverywhereKey"),
            popup: null,
            callback: getHE  //Why is this needed? Setting the callback directly automatically calls when there is a parameter
        }];
        var nb = gBrowser.getNotificationBox(gBrowser.getBrowserForDocument(aDocument));
        nb.appendNotification(httpsfinder.strings.getString("httpsfinder.main.NoHttpsEverywhere"),
            'httpsfinder-getHE','chrome://httpsfinder/skin/httpsAvailable.png',
            nb.PRIORITY_INFO_LOW, installButtons);
    };

    //See previous comment (in installButtons)
    var getHE = function(){
        httpsfinder.browserOverlay.openWebsiteInTab("http://www.eff.org/https-everywhere/");
    };

    //HTTPS Everywhere is installed. Prompt for restart
    var promptForRestart = function() {
        var nb = gBrowser.getNotificationBox(gBrowser.getBrowserForDocument(aDocument));
        var pbs = Components.classes["@mozilla.org/privatebrowsing;1"]
        .getService(Components.interfaces.nsIPrivateBrowsingService);

        var key = "httpsfinder-restart" + gBrowser.getBrowserIndexForDocument(gBrowser.contentDocument);

        var restartButtons = [{
            label: httpsfinder.strings.getString("httpsfinder.main.restartYes"),
            accessKey: httpsfinder.strings.getString("httpsfinder.main.restartYesKey"),
            popup: null,
            callback: httpsfinder.browserOverlay.restartNow
        }];

        if (!pbs.privateBrowsingEnabled)
            nb.appendNotification(httpsfinder.strings.getString("httpsfinder.main.restartPrompt"),
                key,'chrome://httpsfinder/skin/httpsAvailable.png',
                nb.PRIORITY_INFO_LOW, restartButtons);
        else
            nb.appendNotification(httpsfinder.strings.getString("httpsfinder.main.restartPromptPrivate"),
                key,'chrome://httpsfinder/skin/httpsAvailable.png',
                nb.PRIORITY_INFO_LOW, restartButtons);

        if(httpsfinder.prefs.getBoolPref("dismissAlerts"))
            setTimeout(function(){
                httpsfinder.browserOverlay.removeNotification(key)
            },httpsfinder.prefs.getIntPref("alertDismissTime") * 1000, 'httpsfinder-restart');
    };
};